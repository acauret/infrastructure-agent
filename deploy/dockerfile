# Multi-stage Dockerfile for Azure Container Apps deployment
FROM node:20-alpine AS node-base

# Install Azure MCP server and Azure DevOps MCP globally
RUN npm install -g @azure/mcp@latest @azure-devops/mcp@latest

FROM python:3.11-slim AS python-base

# Install system dependencies (incl. Azure CLI for ADO auth flows)
RUN apt-get update && apt-get install -y \
    curl \
    git \
    ca-certificates \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

# Install Azure CLI
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash || true

# Copy Node.js and npm from node image
COPY --from=node-base /usr/local/bin/node /usr/local/bin/
COPY --from=node-base /usr/local/bin/npm /usr/local/bin/
COPY --from=node-base /usr/local/bin/npx /usr/local/bin/
COPY --from=node-base /usr/local/lib/node_modules /usr/local/lib/node_modules

# Create symbolic links for node modules
RUN ln -sf /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm && \
    ln -sf /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY agent/ ./agent/
COPY multi_agent/ ./multi_agent/
COPY .env* ./

# Create non-root user for security
RUN adduser --disabled-password --gecos '' appuser && \
    chown -R appuser:appuser /app
USER appuser

# Expose port (if needed for health checks)
EXPOSE 8080

# Set environment variables
ENV PYTHONPATH=/app
ENV NODE_PATH=/usr/local/lib/node_modules

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys; sys.exit(0)"

# Default command - run the autogen v2 agent (can be overridden)
CMD ["python", "multi_agent/autogen/autogen_agent_v2.py"]